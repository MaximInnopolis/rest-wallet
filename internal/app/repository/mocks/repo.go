// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo.go
//
// Generated by this command:
//
//	mockgen -source ./repo.go -destination=./mocks/repo.go -package=mock_repo
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepo is a mock of WalletRepo interface.
type MockWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepoMockRecorder
}

// MockWalletRepoMockRecorder is the mock recorder for MockWalletRepo.
type MockWalletRepoMockRecorder struct {
	mock *MockWalletRepo
}

// NewMockWalletRepo creates a new mock instance.
func NewMockWalletRepo(ctrl *gomock.Controller) *MockWalletRepo {
	mock := &MockWalletRepo{ctrl: ctrl}
	mock.recorder = &MockWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepo) EXPECT() *MockWalletRepoMockRecorder {
	return m.recorder
}

// GetWalletBalance mocks base method.
func (m *MockWalletRepo) GetWalletBalance(walletID uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletBalance", walletID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletBalance indicates an expected call of GetWalletBalance.
func (mr *MockWalletRepoMockRecorder) GetWalletBalance(walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletBalance", reflect.TypeOf((*MockWalletRepo)(nil).GetWalletBalance), walletID)
}

// Update mocks base method.
func (m *MockWalletRepo) Update(walletID uuid.UUID, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", walletID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWalletRepoMockRecorder) Update(walletID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWalletRepo)(nil).Update), walletID, amount)
}
